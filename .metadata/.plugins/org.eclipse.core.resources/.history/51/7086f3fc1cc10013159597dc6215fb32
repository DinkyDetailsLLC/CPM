package com.example.myhairdid;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import utils.ApplicationBitmapManager;

import com.parse.ParseException;
import com.parse.ParseFile;
import com.parse.ParseObject;
import com.parse.ParseUser;
import com.parse.SaveCallback;

import android.R.string;
import android.app.Activity;
import android.app.Application;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class AddClientInfo extends Activity {

	private static final int ACTION_REQUEST_GALLERY = 99;
	private static final int ACTION_REQUEST_FEATHER = 100;
	private static final int EXTERNAL_STORAGE_UNAVAILABLE = 1;
	// Activity request codes
	private static final int CAMERA_CAPTURE_IMAGE_REQUEST_CODE = 200;
	public static final int MEDIA_TYPE_IMAGE = 1;
	/** Folder name on the sdcard where the images will be saved **/
	private static final String FOLDER_NAME = "TEST";

	EditText et_name, et_address, et_city, et_state, et_zip, et_phone,
			et_email;
	String client_name, client_add, client_city, client_state, client_email,
			client_phone, client_zip;
	Button btn_save;

	String mOutputFilePath;
	Uri mImageUri;
	int imageWidth, imageHeight;
	private File mGalleryFolder;
	ProgressDialog mProgressDlg;
	boolean mFlgChangePic;
	Bitmap mBitmapPic;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(savedInstanceState);
		setContentView(R.layout.add_client_info);

		et_name = (EditText) findViewById(R.id.add_client_et_name);
		et_address = (EditText) findViewById(R.id.add_client_et_address);
		et_city = (EditText) findViewById(R.id.add_client_et_city);
		et_state = (EditText) findViewById(R.id.add_client_et_state);
		et_zip = (EditText) findViewById(R.id.add_client_et_zip);
		et_phone = (EditText) findViewById(R.id.add_client_et_phone);
		et_email = (EditText) findViewById(R.id.add_client_et_email);

		btn_save = (Button) findViewById(R.id.add_client_btnSave);

		btn_save.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub

				validateForm();
			}
		});

		((Button) findViewById(R.id.add_client_bt_upload))
				.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						// TODO Auto-generated method stub
						// custom dialog
						final Dialog dialog = new Dialog(AddClientInfo.this);
						dialog.setContentView(R.layout.dialog_pic_selection);
						dialog.setTitle("Title...");

						// set the custom dialog components - text, image and
						// button
						((Button) dialog.findViewById(R.id.dialog_bt_gallery))
								.setOnClickListener(new OnClickListener() {

									@Override
									public void onClick(View v) {
										// TODO Auto-generated method stub
										dialog.dismiss();
										pickFromGallery();
									}
								});
						// ((Button) dialog.findViewById(R.id.dialog_bt_camera))
						// .setOnClickListener(new OnClickListener() {
						//
						// @Override
						// public void onClick(View v) {
						// // TODO Auto-generated method stub
						// captureImage();
						// }
						// });
						dialog.show();
					}
				});
	}

	/**
	 * Start the activity to pick an image from the user gallery
	 */
	private void pickFromGallery() {
		Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
		intent.setType("image/*");

		Intent chooser = Intent.createChooser(intent, "Choose a Picture");
		startActivityForResult(chooser, ACTION_REQUEST_GALLERY);
	}

	/*
	 * Capturing Camera Image will lauch camera app requrest image capture
	 */
	private void captureImage() {
		Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);

		mImageUri = getOutputMediaFileUri(MEDIA_TYPE_IMAGE);

		intent.putExtra(MediaStore.EXTRA_OUTPUT, mImageUri);

		// start the image capture Intent
		startActivityForResult(intent, CAMERA_CAPTURE_IMAGE_REQUEST_CODE);
	}

	/*
	 * Creating file uri to store image/video
	 */
	public Uri getOutputMediaFileUri(int type) {
		return Uri.fromFile(getOutputMediaFile(type));
	}

	/*
	 * Here we store the file url as it will be null after returning from camera
	 * app
	 */
	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);

		// save file url in bundle as it will be null on scren orientation
		// changes
		outState.putParcelable("file_uri", mImageUri);
	}

	@Override
	protected void onRestoreInstanceState(Bundle savedInstanceState) {
		super.onRestoreInstanceState(savedInstanceState);

		// get the file url
		mImageUri = savedInstanceState.getParcelable("file_uri");
	}

	/*
	 * returning image / video
	 */
	private static File getOutputMediaFile(int type) {

		// External sdcard location
		File mediaStorageDir = new File(
				Environment
						.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),
				FOLDER_NAME);

		// Create the storage directory if it does not exist
		if (!mediaStorageDir.exists()) {
			if (!mediaStorageDir.mkdirs()) {
				Log.d(FOLDER_NAME, "Oops! Failed create " + FOLDER_NAME
						+ " directory");
				return null;
			}
		}

		// Create a media file name
		String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss",
				Locale.getDefault()).format(new Date());
		File mediaFile;
		if (type == MEDIA_TYPE_IMAGE) {
			mediaFile = new File(mediaStorageDir.getPath() + File.separator
					+ "IMG_" + timeStamp + ".jpg");
		} else {
			return null;
		}

		return mediaFile;
	}

	@Override
	/**
	 * This method is called when feather has completed ( ie. user clicked on "done" or just exit the activity without saving ). <br />
	 * If user clicked the "done" button you'll receive RESULT_OK as resultCode, RESULT_CANCELED otherwise.
	 * 
	 * @param requestCode
	 * 	- it is the code passed with startActivityForResult
	 * @param resultCode
	 * 	- result code of the activity launched ( it can be RESULT_OK or RESULT_CANCELED )
	 * @param data
	 * 	- the result data
	 */
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (resultCode == RESULT_OK) {
			switch (requestCode) {

			case CAMERA_CAPTURE_IMAGE_REQUEST_CODE:
				// user chose an image from the gallery
				if (resultCode == RESULT_OK) {
					// successfully captured the image
					// display it in image view
					previewCapturedImage();
				} else if (resultCode == RESULT_CANCELED) {
					// user cancelled Image capture
					Toast.makeText(getApplicationContext(),
							"User cancelled image capture", Toast.LENGTH_SHORT)
							.show();
				} else {
					// failed to capture image
					Toast.makeText(getApplicationContext(),
							"Sorry! Failed to capture image",
							Toast.LENGTH_SHORT).show();
				}
				break;

			case ACTION_REQUEST_GALLERY:
				// user chose an image from the gallery
				// loadAsync(data.getData());
				System.out.println("Image from Gallery");
				mFlgChangePic = true;
				mImageUri = data.getData();
				System.out.println("mImageUri" + mImageUri);
				previewCapturedImage();
				break;

			}
		}
	}

	/*
	 * Display image from a path to ImageView
	 */
	private void previewCapturedImage() {
		try {
			// bimatp factory
			mFlgChangePic = true;

			try {
				mBitmapPic = MediaStore.Images.Media.getBitmap(
						this.getContentResolver(), mImageUri);
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		} catch (NullPointerException e) {
			e.printStackTrace();
		}
	}

	void saveButtonPressed() {

		mProgressDlg = ProgressDialog.show(this, "Please wait...",
				"Uploading client details...", true);

		client_name = et_name.getText().toString();
		client_add = et_address.getText().toString();
		client_city = et_city.getText().toString();
		client_state = et_state.getText().toString();
		client_email = et_email.getText().toString();
		client_phone = et_phone.getText().toString();
		client_zip = et_zip.getText().toString();

		final ParseObject newStatus = new ParseObject("ClientDetail");
		newStatus.put("fromUser", ParseUser.getCurrentUser().getUsername());
		newStatus.put("type", "status");

		newStatus.put("name", client_name);
		newStatus.put("address", client_add);
		newStatus.put("city", client_city);
		newStatus.put("email", client_email);
		newStatus.put("phone", client_phone);
		newStatus.put("state", client_state);
		newStatus.put("zip", client_zip);

		if (mFlgChangePic) {
			System.gc();

			if (mBitmapPic != null) {
				ByteArrayOutputStream stream = new ByteArrayOutputStream();
				mBitmapPic.compress(Bitmap.CompressFormat.JPEG, 90, stream);
				byte[] byteArray = stream.toByteArray();

				newStatus.put("image", new ParseFile(byteArray));
			} else {

			}
		}

		newStatus.saveInBackground(new SaveCallback() {

			@Override
			public void done(ParseException e) {
				// TODO Auto-generated method stub

				System.out.println("e>>>>>>>>>" + e);
				if (e == null) {
					mProgressDlg.dismiss();

					Intent intent = new Intent(AddClientInfo.this,
							ClientList.class);
					intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
					startActivity(intent);
					finish();
				} else {
					mProgressDlg.dismiss();
				}

				// overridePendingTransition(R.anim.mainfadein,
				// R.anim.splashfadeout);ss
			}
		});
	}

	void validateForm() {

		client_name = et_name.getText().toString();
		client_add = et_address.getText().toString();
		client_city = et_city.getText().toString();
		client_state = et_state.getText().toString();
		client_email = et_email.getText().toString();
		client_phone = et_phone.getText().toString();
		client_zip = et_zip.getText().toString();

		if (client_name.length() <= 0) {
			Toast.makeText(this, "Please enter name", Toast.LENGTH_SHORT)
					.show();
		} else if (client_add.length() <= 0) {
			Toast.makeText(this, "Please enter address", Toast.LENGTH_SHORT)
					.show();
		} else if (client_city.length() <= 0) {
			Toast.makeText(this, "Please enter city", Toast.LENGTH_SHORT)
					.show();
		} else if (client_state.length() <= 0) {
			Toast.makeText(this, "Please enter state", Toast.LENGTH_SHORT)
					.show();
		} else if (!(isValidEmail(et_email.getText().toString()))) {
			Toast.makeText(getApplicationContext(),
					"Please enter valid email id.", Toast.LENGTH_LONG).show();
		} else if (et_phone.getText().toString().length() <= 0) {
			Toast.makeText(this, "Please enter contact number",
					Toast.LENGTH_SHORT).show();
		} else if (et_zip.getText().toString().length() <= 0
				&& et_zip.getText().toString().length() == 6) {
			Toast.makeText(this, "zip code entred is not correct",
					Toast.LENGTH_SHORT).show();
		} else {
			saveButtonPressed();
		}
	}

	public final static boolean isValidEmail(CharSequence email) {
		if (email == null) {
			return false;
		} else {
			return android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();
		}
	}

}
